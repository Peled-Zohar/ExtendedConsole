{
  "README.html": {
    "href": "README.html",
    "title": "ExtendedConsole | Extended Console",
    "keywords": "ExtendedConsole Provides a set of methods to make your life as a programmer easier when writing a Console application. It has methods for writing simple markup text to help you easily control the color of your output, methods for validating and parsing user input to help you easily get type-safe data from your users, methods for easily creating menus and methods for easily clearing specific lines in the console's output. This repository also contains a project called UsingExtendedConsole that contains code samples to shows how to use the ExtendedConsole project. The ExtendedConsole project is licenced with the MIT licence, meaning you can use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of this project free of charge, on an \"AS IS\" basis. For more information, read the LICENSE file (Don't worry, it's short and easy to understand). ExtendedConsole is available on Nuget - https://www.nuget.org/packages/ExtendedConsole. Official documentation includes full documentation with code examples and articles."
  },
  "api/ExtendedConsole.ExConsole.html": {
    "href": "api/ExtendedConsole.ExConsole.html",
    "title": "Class ExConsole | Extended Console",
    "keywords": "Class ExConsole Namespace ExtendedConsole Assembly ExtendedConsole.dll Provides support for using an xml based markup text in console applications. Markup contains text and control tags to set the foreground and background color of the text. Color names are limited to members of the ConsoleColor enum, but are case insensitive. Markup example: <c f='Yellow'>yellow text<c b='blue'> on blue background.</c></c> public class ExConsole Inheritance object ExConsole Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ExConsoleChooseFromEnum.ChooseFromEnum<T>(ExConsole, MenuDisplayArgs) ExConsoleChooseFromEnum.ChooseFromEnum<T>(ExConsole, string, MenuDisplayArgs) ExConsoleClearLines.ClearAllLines(ExConsole) ExConsoleClearLines.ClearCurrentLine(ExConsole) ExConsoleClearLines.ClearLastLine(ExConsole) ExConsoleClearLines.ClearLastLines(ExConsole, int) ExConsoleClearLines.ClearLine(ExConsole, int) ExConsoleMenu.Menu(ExConsole, MenuDisplayArgs, params string[]) ExConsoleMenu.Menu(ExConsole, MenuDisplayArgs, params (string Title, Action Action)[]) ExConsoleMultipleSelectMenu.MultipleSelectMenu<T>(ExConsole, MultipleSelectDisplayArgs, Func<T, string>, params T[]) ExConsoleMultipleSelectMenu.MultipleSelectMenu<T>(ExConsole, MultipleSelectDisplayArgs, params T[]) ExConsoleRead.Pause(ExConsole) ExConsoleRead.Pause(ExConsole, string) ExConsoleRead.ReadBool(ExConsole, ConsoleKey, ConsoleKey, string) ExConsoleRead.ReadBool(ExConsole, ConsoleKey, string) ExConsoleRead.ReadClass<T>(ExConsole, string, string, Func<string, (bool Success, T Value)>) ExConsoleRead.ReadDateTime(ExConsole, string, string) ExConsoleRead.ReadDateTime(ExConsole, string, string, IFormatProvider, DateTimeStyles) ExConsoleRead.ReadDateTime(ExConsole, string, string, string, IFormatProvider, DateTimeStyles) ExConsoleRead.ReadDateTime(ExConsole, string, string, string[], IFormatProvider, DateTimeStyles) ExConsoleRead.ReadInt(ExConsole, string) ExConsoleRead.ReadInt(ExConsole, string, Func<int, bool>) ExConsoleRead.ReadInt(ExConsole, string, string, Func<int, bool>) ExConsoleRead.ReadKey(ExConsole, string, bool) ExConsoleRead.ReadLine(ExConsole, string) ExConsoleRead.ReadLine(ExConsole, string, string, Predicate<string>) ExConsoleRead.ReadStruct<T>(ExConsole, string, string, Func<string, (bool Success, T Value)>) ExConsoleRead.ReadUntilConverted<T>(ExConsole, string, string, Func<string, (bool Success, T Value)>) ExConsoleRead.ReadValues<T>(ExConsole, string, string, string, Func<string, (bool Success, T Value)>) Methods Write(string) Writes the specified markup to the console. public ExConsole Write(string markup) Parameters markup string Markup text to write. Returns ExConsole The current instance of ExConsole. Examples Write \"Hello World!\", cyan on a dark gray background. exConsole.Write(\"<c f='cyan' b='darkgray'>Hello World!<c>\"); Exceptions XmlException Thrown when markup text isn't properly formatted xml. Write(string, ConsoleColor?, ConsoleColor?) Changes console colors to the specified colors, and writes the specified markup to the console. Note: This method is deprecated and will be removed in future versions. [Obsolete(\"this method is deprecated and will be removed in future versions.\")] public ExConsole Write(string markup, ConsoleColor? foregroundColor, ConsoleColor? backgroundColor) Parameters markup string Markup text to write. foregroundColor ConsoleColor? Foreground color. backgroundColor ConsoleColor? Background color. Returns ExConsole The current instance of ExConsole. Examples Write \"Hello World!\" in black on a magenta background, followed by \"How are you?\" in black on a white background. exConsole.Write(\"Hello world! <c b='white' f='black'>How are you?<c>\", ConsoleColor.Black, ConsoleColor.Magenta); Exceptions XmlException Thrown when markup text isn't properly formatted xml. WriteLine(string) Writes the specified markup to the console, advances the cursor to the next line. public ExConsole WriteLine(string markup) Parameters markup string Markup text to write. Returns ExConsole The current instance of ExConsole. Examples Write \"Hello World!\", black on a white background, and advance the cursor to the next line. exConsole.WriteLine(\"<c b='white' f='black'>Hello World!<c>\"); Exceptions XmlException Thrown when markup text isn't properly formatted xml. WriteLine(string, ConsoleColor?, ConsoleColor?) Changes console colors to the specified colors, and writes the specified markup to the console. Advances the cursor to the next line. Note: This method is deprecated and will be removed in future versions. [Obsolete(\"this method is deprecated and will be removed in future versions.\")] public ExConsole WriteLine(string markup, ConsoleColor? foregroundColor, ConsoleColor? backgroundColor) Parameters markup string Markup text to write. foregroundColor ConsoleColor? Foreground color. backgroundColor ConsoleColor? Background color. Returns ExConsole The current instance of ExConsole. Examples Write \"Hello World!\" in magenta, followed by \"How are you?\" in black on a white background. Advance the cursor to the next line. exConsole.WriteLine(\"Hello world! <c b='white' f='black'>How are you?<c>\", ConsoleColor.Magenta, null); Exceptions XmlException Thrown when markup text isn't properly formatted xml. WriteLines(params string[]) Writes multiple markup lines to the console. public ExConsole WriteLines(params string[] lines) Parameters lines string[] Lines of markup text to write. Returns ExConsole The current instance of ExConsole. Examples Write \"Hello World!\" in yellow, \"This is exConsole writing multiple markup lines\" in the next line, with exConsole in green, and \"To the Console.\" in the last line. Advance the cursor to the next line. exConsole.WriteLines( \"<c f='Yellow'>Hello World!<c>\", \"This is <c f='green'>exConsole<c> writing multiple markup lines\", \"To the Console.\" ); Exceptions XmlException Thrown when markup text isn't properly formatted xml."
  },
  "api/ExtendedConsole.ExConsoleChooseFromEnum.html": {
    "href": "api/ExtendedConsole.ExConsoleChooseFromEnum.html",
    "title": "Class ExConsoleChooseFromEnum | Extended Console",
    "keywords": "Class ExConsoleChooseFromEnum Namespace ExtendedConsole Assembly ExtendedConsole.dll Provides extension methods for ExConsole to support simple menus based on enum values. public static class ExConsoleChooseFromEnum Inheritance object ExConsoleChooseFromEnum Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ChooseFromEnum<T>(ExConsole, MenuDisplayArgs) Displays enum members as a menu for the user to choose from. public static T ChooseFromEnum<T>(this ExConsole self, MenuDisplayArgs displayArgs) where T : Enum Parameters self ExConsole The current instance of ExConsole. displayArgs MenuDisplayArgs An instance of the MenuDisplayArgs class holding the display configuration of the enum based menu. Returns T The member of the enum the user selected. Type Parameters T The type of the enum. Examples Display the names of the members of the ConsoleColor enum, asking the user to choose a color from the list. the color variable is of type ConsoleColor. var color = exConsole.ChooseFromEnum<ConsoleColor>( new MenuDisplayArgs( \"Choose a foreground color\", \"Please choose a color.\", false, \"Please choose from the above list.\") ); Exceptions ArgumentNullException Thrown when self, displayArgs or any of its properties are null. ArgumentException Thrown when any of the string properties of displayArgs are empty. XmlException Thrown when any of the string properties of displayArgs are not properly formatted xml. ChooseFromEnum<T>(ExConsole, string, MenuDisplayArgs) Displays enum members as a menu for the user to choose from. public static T? ChooseFromEnum<T>(this ExConsole self, string quitText, MenuDisplayArgs displayArgs) where T : struct, Enum Parameters self ExConsole The current instance of ExConsole. quitText string The title of a menu item that isn't a member of the enum, to enable the user to return without choosing. displayArgs MenuDisplayArgs An instance of the MenuDisplayArgs class holding the display configuration of the enum based menu. Returns T? The member of the enum the user selected, or null if the user selected the \"quit\" menu item. Type Parameters T The type of the enum. Examples Display the names of the members of the ConsoleColor enum, asking the user to choose a color from the list, or \"none\". the color variable is of type Nullable<ConsoleColor> and will be null if the user choose \"none\". var color = exConsole.ChooseFromEnum<ConsoleColor>( \"<c f='red'>none</c>\", new MenuDisplayArgs( \"Choose a foreground color\", \"Please choose a color or <c f='red>none</c> to keep current color.\", invalidSelectionErrorMessage:\"Please choose from the above list.\") ); Exceptions ArgumentNullException Thrown when self, displayArgs or any of its properties, or quitText are null. ArgumentException Thrown when any of the string properties of displayArgs or quitText are empty. XmlException Thrown when any of the string properties of displayArgs or quitText are not properly formatted xml."
  },
  "api/ExtendedConsole.ExConsoleClearLines.html": {
    "href": "api/ExtendedConsole.ExConsoleClearLines.html",
    "title": "Class ExConsoleClearLines | Extended Console",
    "keywords": "Class ExConsoleClearLines Namespace ExtendedConsole Assembly ExtendedConsole.dll Provides extension methods for ExConsole for clearing specific console lines. public static class ExConsoleClearLines Inheritance object ExConsoleClearLines Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ClearAllLines(ExConsole) Clears all the text on the console, and returns the current instance of ExConsole. public static ExConsole ClearAllLines(this ExConsole self) Parameters self ExConsole The current instance of ExConsole. Returns ExConsole The current instance of ExConsole. Examples Pause, clear all lines, and ask the user to enter an integer value: exConsole .Pause(\"Press any key to continue\") .ClearAllLines() .ReadInt(\"Please enter a number:\"); ClearCurrentLine(ExConsole) Clears all text from the current line. public static ExConsole ClearCurrentLine(this ExConsole self) Parameters self ExConsole The current instance of ExConsole. Returns ExConsole The current instance of ExConsole. Examples Clears the current line of the console. exConsole.ClearCurrentLine(); ClearLastLine(ExConsole) Clears all text from the last line. public static ExConsole ClearLastLine(this ExConsole self) Parameters self ExConsole The current instance of ExConsole. Returns ExConsole The current instance of ExConsole. Examples Clear the last line. exConsole.ClearLastLine(); ClearLastLines(ExConsole, int) Clears all text from the last lines. public static ExConsole ClearLastLines(this ExConsole self, int numberOfLines) Parameters self ExConsole The current instance of ExConsole. numberOfLines int The number of lines to clear (count up from last line) Returns ExConsole The current instance of ExConsole. Examples Clear the last three lines. exConsole.ClearLastLines(3); Exceptions ArgumentOutOfRangeException Thrown if numberOfLines is less than one. ClearLine(ExConsole, int) Clears all text from a specific line. public static ExConsole ClearLine(this ExConsole self, int lineIndex) Parameters self ExConsole The current instance of ExConsole. lineIndex int Line index to clear. Returns ExConsole The current instance of ExConsole. Examples Clear the second line from the top. exConsole.ClearLine(1); Exceptions ArgumentOutOfRangeException Thrown if lineIndex is less than zero."
  },
  "api/ExtendedConsole.ExConsoleMenu.html": {
    "href": "api/ExtendedConsole.ExConsoleMenu.html",
    "title": "Class ExConsoleMenu | Extended Console",
    "keywords": "Class ExConsoleMenu Namespace ExtendedConsole Assembly ExtendedConsole.dll Provides extension methods for ExConsole to support simple menus. public static class ExConsoleMenu Inheritance object ExConsoleMenu Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Menu(ExConsole, MenuDisplayArgs, params string[]) Displays a menu to the user and invokes the action the user chooses. public static int Menu(this ExConsole self, MenuDisplayArgs displayArgs, params string[] items) Parameters self ExConsole The current instance of ExConsole. displayArgs MenuDisplayArgs An instance of the MenuDisplayArgs class holding the display configuration of the menu. items string[] The items of the menu. Returns int An integer representing the user's choice. Examples Create and run a menu with the specified items, \"What to do next?\" as a title, \"Please enter the number of your selection.\" displayed below the items, and \"Invalid number entered. Please try again.\", if the user enters an invalid value. This menu does not execute anything, it only returns the zero-based index of the item selected by the user var selection = exConsole.Menu( new MenuDisplayArgs(\"What to do next?\", \"Please enter the number of your selection.\", invalidSelectionErrorMessage:\"Invalid number entered. Please try again.\" ) \"<c f='Yellow'>quit<c>\", \"Do this\", \"Do that\" ); Exceptions ArgumentNullException Thrown when self or displayArgs or any of it's properties are null. ArgumentException Thrown when displayArgs is empty or when items are not supplied. XmlException Thrown when any of the text properties of displayArgs isn't properly formatted xml. Menu(ExConsole, MenuDisplayArgs, params (string Title, Action Action)[]) Displays a menu to the user and invokes the action the user chooses. public static int Menu(this ExConsole self, MenuDisplayArgs displayArgs, params (string Title, Action Action)[] items) Parameters self ExConsole The current instance of ExConsole. displayArgs MenuDisplayArgs An instance of the MenuDisplayArgs class holding the display configuration of the menu. items (string Title, Action Action)[] The items of the menu. Each item contains a title and an action to perform, should the user choses this item. null can be passed in as the action if the item selection should perform no action. Returns int An integer representing the user's choice. Examples Create and run a menu with the specified title and items, that will disapear after the user selected an item. var selection = exConsole.Menu( new MenuDisplayArgs(\"What to do next?\"), (\"<c f='Yellow'>quit<c>\", null), (\"Do this\", () => DoThis(3)), (\"Do that\", DoThat) ); Exceptions ArgumentNullException Thrown when self or displayArgs or any of it's properties are null. ArgumentException Thrown when displayArgs is empty or when items are not supplied. XmlException Thrown when any of the text properties of displayArgs isn't properly formatted xml."
  },
  "api/ExtendedConsole.ExConsoleMultipleSelectMenu.html": {
    "href": "api/ExtendedConsole.ExConsoleMultipleSelectMenu.html",
    "title": "Class ExConsoleMultipleSelectMenu | Extended Console",
    "keywords": "Class ExConsoleMultipleSelectMenu Namespace ExtendedConsole Assembly ExtendedConsole.dll Provides extension methods for ExConsole to support multiple select menus. public static class ExConsoleMultipleSelectMenu Inheritance object ExConsoleMultipleSelectMenu Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MultipleSelectMenu<T>(ExConsole, MultipleSelectDisplayArgs, Func<T, string>, params T[]) Displays a multiple select menu to the user and returns the item(s) the user selected. public static IEnumerable<T> MultipleSelectMenu<T>(this ExConsole self, MultipleSelectDisplayArgs displayArgs, Func<T, string> toString, params T[] items) Parameters self ExConsole The current instance of ExConsole. displayArgs MultipleSelectDisplayArgs An instance of the MultipleSelectDisplayArgs class holding the display configuration of the menu. toString Func<T, string> A Func<T, TResult> to be used to display the items on the console, TResult is a string. items T[] The items of the menu. Returns IEnumerable<T> An IEnumerable<T> containing the values selected by the user. Type Parameters T The type of items for the user to select from. Examples Show the user a list of dates to choose from, as yyyy-mm-dd, return an IEnumerable<T> where T is DateTime. var dates = exConsole.MultipleSelectMenu( new MultipleSelectDisplayArgs(\"Select at least one date.\", focusedItemColor:ConsoleColor.Cyan), d => d.ToString(\"yyyy-mm-dd\"), DateTime.Now, DateTime.Now.AddHours(1), DateTime.Now.AddHours(2), DateTime.Now.AddHours(3) ); After the user selects the desired values, the dates variable will contain the user's selection. Exceptions ArgumentNullException Thrown when any of the parameters is null. ArgumentException Thrown when any of the text properties of displayArgs are empty, or when items contain less than two items. XmlException Thrown when any of the text properties of displayArgs aren't properly formatted xml. MultipleSelectMenu<T>(ExConsole, MultipleSelectDisplayArgs, params T[]) Displays a multiple select menu to the user and returns the item(s) the user selected. public static IEnumerable<T> MultipleSelectMenu<T>(this ExConsole self, MultipleSelectDisplayArgs displayArgs, params T[] items) Parameters self ExConsole The current instance of ExConsole. displayArgs MultipleSelectDisplayArgs An instance of the MultipleSelectDisplayArgs class holding the display configuration of the menu. items T[] The items of the menu. Returns IEnumerable<T> An IEnumerable<T> containing the values selected by the user. Type Parameters T The type of items for the user to select from. Examples Show the user a list of dates to choose from, return an IEnumerable<T> where T is DateTime. var dates = exConsole.MultipleSelectMenu( new MultipleSelectDisplayArgs(\"Select at least one date.\", focusedItemColor:ConsoleColor.Cyan), DateTime.Now, DateTime.Now.AddHours(1), DateTime.Now.AddHours(2), DateTime.Now.AddHours(3) ); After the user selects the desired values, the dates variable will contain the user's selection. Exceptions ArgumentNullException Thrown when any of the parameters is null. ArgumentException Thrown when any of the text properties of displayArgs are empty, or when items contain less than two items. XmlException Thrown when any of the text properties of displayArgs aren't properly formatted xml."
  },
  "api/ExtendedConsole.ExConsoleRead.html": {
    "href": "api/ExtendedConsole.ExConsoleRead.html",
    "title": "Class ExConsoleRead | Extended Console",
    "keywords": "Class ExConsoleRead Namespace ExtendedConsole Assembly ExtendedConsole.dll Provides extension methods for ExConsole for easy reading and parsing inputs from the user. public static class ExConsoleRead Inheritance object ExConsoleRead Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Pause(ExConsole) Pause the console application until the user press a key. public static ExConsole Pause(this ExConsole self) Parameters self ExConsole The current instance of ExConsole. Returns ExConsole The current instance of ExConsole. Examples Write \"Press any key to continue.\" to the console, and wait for the user to press a key. Advance the cursor to the next line. exConsole.Pause(); Exceptions ArgumentNullException Thrown when self is null. Pause(ExConsole, string) Pause the console application until the user press a key. public static ExConsole Pause(this ExConsole self, string title) Parameters self ExConsole The current instance of ExConsole. title string The title to show the user before asking for input. Returns ExConsole The current instance of ExConsole. Examples Write \"Press any key to continue.\" to the console, where \"any key\" is in yellow, and wait for the user to press a key. Advance the cursor to the next line. exConsole.Pause(\"Press <c f='yellow'>any key</c> to continue.\"); Exceptions ArgumentNullException Thrown when self or title are null. ArgumentException Thrown when title is empty. XmlException Thrown when title isn't properly formatted xml. ReadBool(ExConsole, ConsoleKey, ConsoleKey, string) Covnverts the user input to a boolean value. Will keep waiting until the user press a correct key. public static bool ReadBool(this ExConsole self, ConsoleKey keyForTrue, ConsoleKey keyForFalse, string title) Parameters self ExConsole The current instance of ExConsole. keyForTrue ConsoleKey The key the user should press to return true. keyForFalse ConsoleKey The key the user should press to return false. title string The title to show on the console. Returns bool True or false based on the key the user pressed. Examples Askes the user a yes/no question, returns true if they pressed \"Y\" or false if they press \"N\". Repeats until the user press either \"Y\" or \"N\". var result = exConsole.ReadBool( ConsoleKey.Y, ConsoleKey.N, \"Are you happy (y/n)?\" ); Exceptions ArgumentNullException Thrown when self or title are null. ArgumentException Thrown when title is empty. XmlException Thrown when title isn't properly formatted xml. ReadBool(ExConsole, ConsoleKey, string) Covnverts the user input to a boolean value. public static bool ReadBool(this ExConsole self, ConsoleKey keyForTrue, string title) Parameters self ExConsole The current instance of ExConsole. keyForTrue ConsoleKey The key the user should press to return true. title string The title to show on the console. Returns bool True if the user pressed the key specified in keyForTrue, false otherwise. Examples Askes the user to press \"q\" to quit, returns true if the user pressed \"q\", false otherwise: var result = exConsole.ReadBool(ConsoleKey.Q, \"Press 'Q' to quit\"); Exceptions ArgumentNullException Thrown when self or title are null. ArgumentException Thrown when title is empty. XmlException Thrown when title isn't properly formatted xml. ReadClass<T>(ExConsole, string, string, Func<string, (bool Success, T Value)>) Reads an input line from the user and converts it to T. public static T ReadClass<T>(this ExConsole self, string title, string errorMessage, Func<string, (bool Success, T Value)> converter) where T : class Parameters self ExConsole The current instance of ExConsole. title string The title to show the user before asking for input. errorMessage string The error message to show the user if the conversion failed. converter Func<string, (bool Success, T Value)> A function that takes in a string and returns a ValueTuple of bool success and T value. Returns T The T value converted from the input string, or null if the user entered ^Z. Type Parameters T The target type of the conversion. Examples Parse and get an array of int values from comma-separated integers entered by the user. var ints = exConsole.ReadClass( \"Please enter a list of comma-separated integers\", \"Invalid value entered\", str => { var arr = str.Split(','); if (arr.All(s => int.TryParse(s, out var i))) { return (true, arr.Select(s => int.Parse(s)).ToArray()); } return (false, default(int[])); } ); Exceptions ArgumentNullException Thrown when any of the parameters is null. ArgumentException Thrown when title or errorMessage are empty. XmlException Thrown when title or errorMessage aren't properly formatted xml. ReadDateTime(ExConsole, string, string) Converts the user input into an instance of Nullable<DateTime>. public static DateTime? ReadDateTime(this ExConsole self, string title, string errorMessage) Parameters self ExConsole The current instance of ExConsole. title string The title to show on the console. errorMessage string The error message to show the user in case the input value is invalid. Returns DateTime? A nullable DateTime instance that will have no value if the user entered ^Z. Examples Reads the user input and tries to parse it as a DateTime based on the current thread culture. Returns an instance of Nullalble<DateTime> which is null if the user entered ctrl+Z. Repeats untill successful conversion or user abort. var result = exConsole.ReadDateTime(\"Please enter a date.\", \"failed to convert to date.\"); Exceptions ArgumentNullException Thrown when any of the parameters is null. ArgumentException Thrown when title is empty. XmlException Thrown when title or errorMessage aren't properly formatted xml. ReadDateTime(ExConsole, string, string, IFormatProvider, DateTimeStyles) Converts the user input into an instance of Nullable<DateTime>. public static DateTime? ReadDateTime(this ExConsole self, string title, string errorMessage, IFormatProvider formatProvider, DateTimeStyles dateTimeStyles) Parameters self ExConsole The current instance of ExConsole. title string The title to show on the console. errorMessage string The error message to show the user in case the input value is invalid. formatProvider IFormatProvider An object that supplies culture-specific formatting information about the string expected from the user's input. dateTimeStyles DateTimeStyles A bitwise combination of members of the DateTimeStyles enum. Returns DateTime? A nullable DateTime instance that will have no value if the user entered ^Z. Examples Reads the user input and tries to parse it as a DateTime based on the \"en-US\" culture. Returns an instance of Nullalble<DateTime> which is null if the user entered ctrl+Z. Repeats untill successful conversion or user abort. var result = exConsole.ReadDateTime( \"Please enter a date.\", \"failed to convert to date.\", CultureInfo.GetCultureInfo(\"en-US\"), DateTimeStyles.None); Exceptions ArgumentNullException Thrown when any of the parameters is null. ArgumentException Thrown when title is empty. XmlException Thrown when title or errorMessage aren't properly formatted xml. ReadDateTime(ExConsole, string, string, string, IFormatProvider, DateTimeStyles) Converts the user input to an instance of Nullable<DateTime>. public static DateTime? ReadDateTime(this ExConsole self, string title, string errorMessage, string format, IFormatProvider formatProvider, DateTimeStyles dateTimeStyles) Parameters self ExConsole The current instance of ExConsole. title string The title to show on the console. errorMessage string The error message to show the user in case the input value is invalid. format string The format of the string representation of the datetime value expected. formatProvider IFormatProvider An object that supplies culture-specific formatting information about the string expected from the user's input. dateTimeStyles DateTimeStyles A bitwise combination of members of the DateTimeStyles enum. Returns DateTime? A nullable DateTime instance that will have no value if the user entered ^Z. Examples Reads the user input and tries to parse it as DateTime based on the specified parameters. Returns an instance of Nullalble<DateTime> which is null if the user entered ctrl+Z. Repeats untill successful conversion or user abort. var result = exConsole.ReadDateTime( \"Please enter a date (dd/MM/yyyy).\", \"failed to convert to date.\", \"dd/MM/yyyy\", CultureInfo.InvariantCulture, DateTimeStyles.AssumeLocal ); Exceptions ArgumentNullException Thrown when self, title or errorMessage are null. ArgumentException Thrown when title or errorMessage are empty, or if dateTimeStyles is not a member of the DateTimeStyles enum. XmlException Thrown when title or errorMessage aren't properly formatted xml. ReadDateTime(ExConsole, string, string, string[], IFormatProvider, DateTimeStyles) Converts the user input to an instance of Nullable<DateTime>\"/>. public static DateTime? ReadDateTime(this ExConsole self, string title, string errorMessage, string[] formats, IFormatProvider formatProvider, DateTimeStyles dateTimeStyles) Parameters self ExConsole The current instance of ExConsole. title string The title to show on the console. errorMessage string The error message to show the user in case the input value is invalid. formats string[] An array containing the acceptable formats of the string representation of the datetime value expected. formatProvider IFormatProvider An object that supplies culture-specific formatting information about the string expected from the user's input. dateTimeStyles DateTimeStyles A bitwise combination of members of the DateTimeStyles enum. Returns DateTime? A nullable DateTime instance that will have no value if the user entered ^Z. Examples Reads the user input and tries to parse it as DateTime based on the specified parameters. Returns an instance of Nullalble<DateTime> which is null if the user entered ctrl+Z. Repeats untill successful conversion or user abort. var result = exConsole.ReadDateTime( \"Please enter a date. Acceptable formats are dd/MM/yyyy, MM-dd-yyyy or yyyy-MM-dd.\", \"failed to convert to date.\", new string[] {\"dd/MM/yyyy\", \"MM-dd-yyyy\", \"yyyy-MM-dd\"}, CultureInfo.InvariantCulture, DateTimeStyles.AssumeLocal ); Exceptions ArgumentNullException Thrown when self, title or errorMessage are null. ArgumentException Thrown when title or errorMessage are empty, or if dateTimeStyles is not a member of the DateTimeStyles enum. XmlException Thrown when title or errorMessage aren't properly formatted xml. ReadInt(ExConsole, string) Covnverts the user input to an integer value. public static int ReadInt(this ExConsole self, string title) Parameters self ExConsole The current instance of ExConsole. title string The title to show on the console. Returns int The integer value the user entered. Examples Parse and return an int from the user input. Repeats until the user enters a value that can be parsed as int. var result = exConsole.ReadInt(\"Please enter an integer value.\"); Remarks If the user enters a value that can't be parsed as int, the title will show again until the user enters an int value. Exceptions ArgumentNullException Thrown when self or title are null. ArgumentException Thrown when title is empty. XmlException Thrown when title isn't properly formatted xml. ReadInt(ExConsole, string, Func<int, bool>) Covnverts the user input to an integer value that meets a specific condition. public static int ReadInt(this ExConsole self, string title, Func<int, bool> condition) Parameters self ExConsole The current instance of ExConsole. title string The title to show on the console. This will be shown repeatedly until the user enters a valid value. condition Func<int, bool> The condition the integer value must meet. Returns int The integer value the user entered. Examples Parse and return an int from the user input. Repeats until the value meets the specified condition. var result = exConsole.ReadInt(\"Please enter a positive integer value.\", i => i > 0); Exceptions ArgumentNullException Thrown when self or title are null. ArgumentException Thrown when title is empty. XmlException Thrown when title isn't properly formatted xml. ReadInt(ExConsole, string, string, Func<int, bool>) Covnverts the user input to an integer value that meets a specific condition. public static int ReadInt(this ExConsole self, string title, string errorMessage, Func<int, bool> condition) Parameters self ExConsole The current instance of ExConsole. title string The title to show on the console. errorMessage string The error message to show the user in case the input value is invalid. condition Func<int, bool> The condition the integer value must meet. Returns int The integer value the user entered. Examples Parse and return an int from the user input. If the user enters a value that can't be parsed or doesn't meet the specified condition, display \"Invalid input.\" Repeats until the value meets the specified condition. var result = exConsole.ReadInt(\"Please enter a positive integer value.\", \"Invalid input.\", i => i > 0); Exceptions ArgumentNullException Thrown when self, title or errorMessage are null. ArgumentException Thrown when title or errorMessage are empty. XmlException Thrown when title or errorMessage aren't properly formatted xml. ReadKey(ExConsole, string, bool) Writes the title to the console, and read a key. public static ConsoleKeyInfo ReadKey(this ExConsole self, string title, bool intercept) Parameters self ExConsole The current instance of ExConsole. title string The title to show the user before asking for input. intercept bool Determines whether to display the pressed key in the console window. true to not display the pressed key; otherwise, false. Returns ConsoleKeyInfo An instance of the ConsoleKeyInfo struct that describes the console key the user pressed. ReadLine(ExConsole, string) Writes the title to the console, and read a line of text. public static string ReadLine(this ExConsole self, string title) Parameters self ExConsole The current instance of ExConsole. title string The title to show the user before asking for input. Returns string The string the user entered. Examples Write \"Please enter your first name:\" to the console, where \"first\" is in green, waits for the user to enter a lime, and returns the user's input. var firstName = exConsole.ReadLine(\"Please enter your <c f='green'>first</c> name:\"); Exceptions ArgumentNullException Thrown when self or title are null. ArgumentException Thrown when title is empty. XmlException Thrown when title isn't properly formatted xml. ReadLine(ExConsole, string, string, Predicate<string>) Writes the title to the console, reads a line of text, and returns the input only if it passed the validataion. public static string ReadLine(this ExConsole self, string title, string errorMessage, Predicate<string> validator) Parameters self ExConsole The current instance of ExConsole. title string The title to show the user before asking for input. errorMessage string The error message to show the user if the validation failed. validator Predicate<string> The Predicate<T> to validate the input with. Returns string The string the user entered. Examples Write \"Please enter your first name:\" to the console, where \"first\" is in green, waits for the user to enter a lime, and returns the user's input. var firstName = exConsole.ReadLine(\"Please enter your <c f='green'>first</c> name:\", \"<c f='green'>first</c> name must start with a capital letter\", s => char.IsUpper(s[0])); Exceptions ArgumentNullException Thrown when self or title are null. ArgumentException Thrown when title is empty. XmlException Thrown when title isn't properly formatted xml. ReadStruct<T>(ExConsole, string, string, Func<string, (bool Success, T Value)>) Reads an input line from the user and converts it to a nullable T. public static T? ReadStruct<T>(this ExConsole self, string title, string errorMessage, Func<string, (bool Success, T Value)> converter) where T : struct Parameters self ExConsole The current instance of ExConsole. title string The title to show the user before asking for input. errorMessage string The error message to show the user if the conversion failed. converter Func<string, (bool Success, T Value)> A function that takes in a string and returns a ValueTuple of bool success and T value. Returns T? An instance of T? that has a value unless the user entered ^Z. Type Parameters T The underlying type of the nullable to convert to. Examples Parse and get an instance of the TimeSpan struct from user input. The duration variable is of type Nullable<TimeSpan>, and will be null if the user entered ctrl+Z. var duration = exConsole.ReadStruct( \"Please enter estimated time (HH:mm:ss)\", \"Invalid value entered\", str => (TimeSpan.TryParse(str, out var result), result) ); Exceptions ArgumentNullException Thrown when any of the parameters is null. ArgumentException Thrown when title or errorMessage are empty. XmlException Thrown when title or errorMessage aren't properly formatted xml. ReadUntilConverted<T>(ExConsole, string, string, Func<string, (bool Success, T Value)>) Reads an input line from the user and converts it to T. Repeats until conversion succeeds (even if the user entered ^Z). Use with caution! The user can't exit this method without either providing a convertible value or exiting the entire program! public static T ReadUntilConverted<T>(this ExConsole self, string title, string errorMessage, Func<string, (bool Success, T Value)> converter) Parameters self ExConsole The current instance of ExConsole. title string The title to show the user before asking for input. errorMessage string The error message to show the user if the conversion failed. converter Func<string, (bool Success, T Value)> A function that takes in a string and returns a value tuple of bool success and T value. Returns T The T value converted from the input string. Type Parameters T The target type of the conversion. Examples Parse and get an instance of the TimeSpan struct from user input. var duration = exConsole.ReadUntilConverted( \"Please enter estimated time (HH:mm:ss)\", \"Invalid value entered\", str => (TimeSpan.TryParse(str, out var result), result) ); Exceptions ArgumentNullException Thrown when any of the parameters is null. ArgumentException Thrown when title or errorMessage are empty. XmlException Thrown when title or errorMessage aren't properly formatted xml. ReadValues<T>(ExConsole, string, string, string, Func<string, (bool Success, T Value)>) Reads multiple values from the user, converts and returns them as an IEnumerable<T>. Repeats until the user enters the quit text. public static IEnumerable<T> ReadValues<T>(this ExConsole self, string title, string errorMessage, string quit, Func<string, (bool Success, T Value)> converter) Parameters self ExConsole The current instance of ExConsole. title string The title to show the user before asking for input. errorMessage string The error message to show the user if the conversion failed. quit string A string the user should enter when they are done entering values. converter Func<string, (bool Success, T Value)> A function that takes in a string and returns a value tuple of bool success and T value. Returns IEnumerable<T> An IEnumerable<T> containing values conveted from the user input. Type Parameters T The type of values to convert to. Examples Read a collection of int values from the user. The integers vairable is of type IEnumerable<T>, and will never be null. If the user enters \"done\" before entering any valid integers, the retun value is an empty IEnumerable<T>. var integers = _exConsole.ReadValues( \"Please enter integer values, or <c f='red'>done</c> to quit.\", \"failed to parse input as int.\", \"done\", str => (int.TryParse(str, out var val), val) ); Exceptions ArgumentNullException Thrown when any of the parameters is null. ArgumentException Thrown when title, errorMessage or quit are empty. XmlException Thrown when title or errorMessage aren't properly formatted xml."
  },
  "api/ExtendedConsole.MenuDisplayArgs.html": {
    "href": "api/ExtendedConsole.MenuDisplayArgs.html",
    "title": "Class MenuDisplayArgs | Extended Console",
    "keywords": "Class MenuDisplayArgs Namespace ExtendedConsole Assembly ExtendedConsole.dll Stores display arguments for menu. public class MenuDisplayArgs Inheritance object MenuDisplayArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MenuDisplayArgs(string, string, bool, string) Creates a new instance of the MenuDisplayArgs class with the specified parmeters. public MenuDisplayArgs(string title, string pleaseSelectText = \"Please select an item from the menu.\", bool clearWhenSelected = true, string invalidSelectionErrorMessage = \"Invalid value entered.\") Parameters title string The title of the menu. pleaseSelectText string The text to be displayed below the menu. clearWhenSelected bool A boolean value to determine whether the menu should still be displayed after the user have chosen an option. invalidSelectionErrorMessage string The error message to show if the user entered an invalid selection. Properties ClearWhenSelected Gets a boolean value to determine whether the menu should still be displayed after the user have chosen an option. public bool ClearWhenSelected { get; } Property Value bool InvalidSelectionErrorMessage Gets the error message to display if the user enters an invalid value. public string InvalidSelectionErrorMessage { get; } Property Value string PleaseSelectText Gets the text to be displayed between the title and the menu, instructing the user how to use the menu. public string PleaseSelectText { get; } Property Value string Title Gets the title of the multiple select menu. public string Title { get; } Property Value string"
  },
  "api/ExtendedConsole.MultipleSelectDisplayArgs.html": {
    "href": "api/ExtendedConsole.MultipleSelectDisplayArgs.html",
    "title": "Class MultipleSelectDisplayArgs | Extended Console",
    "keywords": "Class MultipleSelectDisplayArgs Namespace ExtendedConsole Assembly ExtendedConsole.dll Stores display arguments for multiple select menu. public class MultipleSelectDisplayArgs Inheritance object MultipleSelectDisplayArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MultipleSelectDisplayArgs(string, string, bool, ConsoleColor, string, ConsoleColor?) Creates a new instance of the MultipleSelectDisplayArgs class with the specified parmeters. public MultipleSelectDisplayArgs(string title, string pleaseSelectText = \"Use arrow keys (up/down) to navigate, spece bar to select, and enter to submit selection.\", bool clearWhenSelected = true, ConsoleColor focusedItemColor = ConsoleColor.Magenta, string requiredErrorMessage = \"You must select at least one item.\", ConsoleColor? selectedItemColor = null) Parameters title string The title of the multiple select menu. pleaseSelectText string The text to be displayed between the title and the menu, instructing the user how to use the menu. clearWhenSelected bool A boolean value to determine whether the menu should still be displayed after the user have completed his selection. focusedItemColor ConsoleColor The forecolor to use for the currently focused item of the menu. requiredErrorMessage string The error message to display if the user did not select anything from the menu. selectedItemColor ConsoleColor? The forecolor to use for the currently selected item(s) of the menu. Wnen left null, selected items will have the same color as other items. Properties ClearWhenSelected Gets a boolean value to determine whether the menu should still be displayed after the user have completed his selection. public bool ClearWhenSelected { get; } Property Value bool FocusedItemColor Gets the forecolor to use for the currently focused item of the menu. public ConsoleColor FocusedItemColor { get; } Property Value ConsoleColor PleaseSelectText Gets the text to be displayed between the title and the menu, instructing the user how to use the menu. public string PleaseSelectText { get; } Property Value string RequiredErrorMessage Gets the error message to display if the user did not select anything from the menu. public string RequiredErrorMessage { get; } Property Value string SelectedItemColor Gets the forecolor to use for the currently selected item(s) of the menu. public ConsoleColor? SelectedItemColor { get; } Property Value ConsoleColor? Title Gets the title of the multiple select menu. public string Title { get; } Property Value string"
  },
  "api/ExtendedConsole.html": {
    "href": "api/ExtendedConsole.html",
    "title": "Namespace ExtendedConsole | Extended Console",
    "keywords": "Namespace ExtendedConsole Classes ExConsole Provides support for using an xml based markup text in console applications. Markup contains text and control tags to set the foreground and background color of the text. Color names are limited to members of the ConsoleColor enum, but are case insensitive. Markup example: <c f='Yellow'>yellow text<c b='blue'> on blue background.</c></c> ExConsoleChooseFromEnum Provides extension methods for ExConsole to support simple menus based on enum values. ExConsoleClearLines Provides extension methods for ExConsole for clearing specific console lines. ExConsoleMenu Provides extension methods for ExConsole to support simple menus. ExConsoleMultipleSelectMenu Provides extension methods for ExConsole to support multiple select menus. ExConsoleRead Provides extension methods for ExConsole for easy reading and parsing inputs from the user. MenuDisplayArgs Stores display arguments for menu. MultipleSelectDisplayArgs Stores display arguments for multiple select menu."
  },
  "api/UsingExtendedConsole.MID.html": {
    "href": "api/UsingExtendedConsole.MID.html",
    "title": "Class MID | Extended Console",
    "keywords": "Class MID Namespace UsingExtendedConsole Assembly UsingExtendedConsole.dll public class MID Inheritance object MID Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors MID(int, string) public MID(int id, string name) Parameters id int name string Properties Id public int Id { get; } Property Value int Name public string Name { get; } Property Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/UsingExtendedConsole.html": {
    "href": "api/UsingExtendedConsole.html",
    "title": "Namespace UsingExtendedConsole | Extended Console",
    "keywords": "Namespace UsingExtendedConsole Classes MID"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Extended Console",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Extended Console",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Extended Console",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}