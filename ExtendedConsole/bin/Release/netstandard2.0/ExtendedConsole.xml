<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExtendedConsole</name>
    </assembly>
    <members>
        <member name="T:ExtendedConsole.ExConsole">
            <summary>
            Provides support for using an xml based markup text in console applications. 
            Markup contains text and control tags to set the text and background color. 
            Color names are limited to members of the ConsoleColor enum, but are case insensitive.
            </summary>
            <Remarks>
            All methods that writes to console in this class supports markup.
            Since markup is xml based, all write methods might throw a System.Xml.XmlException.
            <para>Markup example: &lt;c f='Yellow'&gt;yellow text&lt;c b='blue'&gt; on blue background.&lt;/c&gt;&lt;/c&gt;</para>
            </Remarks>
        </member>
        <member name="M:ExtendedConsole.ExConsole.Write(System.String)">
            <summary>
            Writes the specified markup to the console.
            <para>Markup example: &lt;c f='Yellow'&gt;yellow text&lt;c b='blue'&gt; on blue background.&lt;/c&gt;&lt;/c&gt;</para>
            </summary>
            <param name="markup">Markup text to write.</param>
            <exception cref="T:System.Xml.XmlException">Thrown when markup text isn't properly formatted xml.</exception>
            <example>
            <code class="lang-csharp">
            exConsole.Write("&lt;c f='cyan' b='darkgray'&gt;Hello World!&lt;c&gt;");
            </code>
            </example>
        </member>
        <member name="M:ExtendedConsole.ExConsole.WriteLine(System.String)">
            <summary>
            Writes the specified markup to the console, advances the cursor to the next line.
            <para>Markup example: &lt;c f='Yellow'&gt;yellow text&lt;c b='blue'&gt; on blue background.&lt;/c&gt;&lt;/c&gt;</para>
            </summary>
            <param name="markup">Markup text to write.</param>
            <exception cref="T:System.Xml.XmlException">Thrown when markup text isn't properly formatted xml.</exception>
            <example>
            <code>
            exConsole.WriteLine("&lt;c b='white' f='black'&gt;Hello World!&lt;c&gt;");
            </code>
            </example>
        </member>
        <member name="M:ExtendedConsole.ExConsole.WriteLines(System.String[])">
            <summary>
            Writes multiple markup lines to the console. 
            <para>Markup example: &lt;c f='Yellow'&gt;yellow text&lt;c b='blue'&gt; on blue background.&lt;/c&gt;&lt;/c&gt;</para>
            </summary>
            <param name="lines">Lines of markup text to write.</param>
            <exception cref="T:System.Xml.XmlException">Thrown when markup text isn't properly formatted xml.</exception>
            <example>
            <code>
            exConsole.WriteLines(
                "&lt;c f='Yellow'&gt;Hello World!&lt;c&gt;",
                "This is &lt;c f='green'&gt;exConsole&lt;c&gt; writing multiple markup lines",
                "To the Console."
            );
            </code>
            </example>
        </member>
        <member name="M:ExtendedConsole.ExConsole.WriteLine(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            Changes console colors to the specified colors, and writes the specified markup to the console. 
            Advances the cursor to the next line.
            </summary>
            <param name="markup">Markup text to write.</param>
            <param name="foregroundColor">Foreground color.</param>
            <param name="backgroundColor">Background color.</param>
            <exception cref="T:System.Xml.XmlException">Thrown when markup text isn't properly formatted xml.</exception>
            <example>
            <code>
            exConsole.WriteLine("Hello world! &lt;c b='white' f='black'&gt;How are you?&lt;c&gt;", ConsoleColor.Magenta, null);
            </code>
            </example>
        </member>
        <member name="M:ExtendedConsole.ExConsole.Write(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            Changes console colors to the specified colors, and writes the specified markup to the console. 
            </summary>
            <param name="markup">Markup text to write.</param>
            <param name="foregroundColor">Foreground color.</param>
            <param name="backgroundColor">Background color.</param>
            <exception cref="T:System.Xml.XmlException">Thrown when markup text isn't properly formatted xml.</exception>
            <example>
            <code>
            exConsole.Write("Hello world! &lt;c b='white' f='black'&gt;How are you?&lt;c&gt;", ConsoleColor.Black, ConsoleColor.Magenta);
            </code>
            </example>
        </member>
        <member name="T:ExtendedConsole.ExConsoleClearLines">
            <summary>
            Provides extension methods for ExConsole for clearing specific console lines.
            </summary>
        </member>
        <member name="M:ExtendedConsole.ExConsoleClearLines.ClearLine(ExtendedConsole.ExConsole,System.Int32)">
            <summary>
            Clears all text from a specific line.
            </summary>
            <param name="self">The current instance of ExConsole.</param>
            <param name="lineIndex">Line index to clear.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="lineIndex"/> is less than zero.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleClearLines.ClearLastLine(ExtendedConsole.ExConsole)">
            <summary>
            Clears all text from the last line.
            </summary>
            <param name="self">The current instance of ExConsole.</param>
        </member>
        <member name="M:ExtendedConsole.ExConsoleClearLines.ClearLastLines(ExtendedConsole.ExConsole,System.Int32)">
            <summary>
            Clears all text from the last lines.
            </summary>
            <param name="self">The current instance of ExConsole.</param>
            <param name="numberOfLines">The number of lines to clear (count up from last line)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="numberOfLines"/> is less than one.</exception>
        </member>
        <member name="T:ExtendedConsole.ExConsoleMenu">
            <summary>
            Provides extension methods for ExConsole to support simple menus.
            </summary>
        </member>
        <member name="M:ExtendedConsole.ExConsoleMenu.Menu(ExtendedConsole.ExConsole,System.String,System.Boolean,System.ValueTuple{System.String,System.Action}[])">
            <summary>
            Displays a menu to the user and invokes the action the user chooses.
            </summary>
            <param name="self">The current instance of ExConsole.</param>
            <param name="title">The title of the menu.</param>
            <param name="clearWhenSelected">A boolean value to determine 
            whether the menu should still be displayed after the user have chosen an option.</param>
            <param name="items">The items of the menu. 
            Each item contains a title and an action to perform, should the user choses this item.
            null can be passed in as the action if the item selection should perform no action.</param>
            <returns>An integer representing the user's choice.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="self"/> or <paramref name="title"/> are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="title"/> is empty or when <paramref name="items"/> are not supplied.</exception>
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/> isn't properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleMenu.Menu(ExtendedConsole.ExConsole,System.String,System.String,System.String,System.Boolean,System.ValueTuple{System.String,System.Action}[])">
            <summary>
            Displays a menu to the user and invokes the action the user chooses.
            </summary>
            <param name="self">The current instance of ExConsole.</param>
            <param name="title">The title of the menu.</param>
            <param name="pleaseSelectText">The text to show below the menu.</param>
            <param name="invalidSelectionText">The text to show when the user enters an invalid value.</param>
            <param name="clearWhenSelected">A boolean value to determine 
            whether the menu should still be displayed after the user have chosen an option.</param>
            <param name="items">The items of the menu. 
            Each item contains a title and an action to perform, should the user choses this item.
            null can be passed in as the action if the item selection should perform no action.</param>
            <returns>An integer representing the user's choice.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="self"/>, <paramref name="title"/>, <paramref name="pleaseSelectText"/> or <paramref name="invalidSelectionText"/> are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of <paramref name="title"/>, <paramref name="pleaseSelectText"/> or <paramref name="invalidSelectionText"/> is empty or when <paramref name="items"/> are not supplied.</exception>
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/>, <paramref name="pleaseSelectText"/> or <paramref name="invalidSelectionText"/> are not properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleMenu.Menu(ExtendedConsole.ExConsole,System.String,System.Boolean,System.String[])">
            <summary>
            Displays a menu to the user and returns the index of the item the user chooses.
            </summary>
            <param name="self">The current instance of ExConsole.</param>
            <param name="title">The title of the menu.</param>
            <param name="clearWhenSelected">A boolean value to determine 
            whether the menu should still be displayed after the user have chosen an option.</param>
            <param name="items">The items of the menu.</param>
            <returns>An integer representing the user's choice.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="self"/> or <paramref name="title"/> are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="title"/> is empty or when <paramref name="items"/> are not supplied.</exception>
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/> isn't properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleMenu.Menu(ExtendedConsole.ExConsole,System.String,System.String,System.String,System.Boolean,System.String[])">
            <summary>
            Displays a menu to the user and returns the index of the item the user chooses.
            </summary>
            <param name="self">The current instance of ExConsole.</param>
            <param name="title">The title of the menu.</param>
            <param name="pleaseSelectText">The text to show below the menu.</param>
            <param name="invalidSelectionText">The text to show when the user enters an invalid value.</param>
            <param name="clearWhenSelected">A boolean value to determine 
            whether the menu should still be displayed after the user have chosen an option.</param>
            <param name="items">The items of the menu.</param>
            <returns>An integer representing the user's choice.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="self"/>, <paramref name="title"/>, <paramref name="pleaseSelectText"/> or <paramref name="invalidSelectionText"/> are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of <paramref name="title"/>, <paramref name="pleaseSelectText"/> or <paramref name="invalidSelectionText"/> is empty or when <paramref name="items"/> are not supplied.</exception>
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/>, <paramref name="pleaseSelectText"/> or <paramref name="invalidSelectionText"/> are not properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleMenu.ChooseFromEnum``1(ExtendedConsole.ExConsole,System.String,System.Boolean)">
            <summary>
            Displays enum members as a menu for the user to choose from.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="self">The current instance of ExConsole.</param>
            <param name="title">The title of the menu.</param>
            <param name="clearWhenSelected">A boolean value to determine 
            whether the menu should still be displayed after the user have chosen an option.</param>
            <returns>The member of the enum the user selected.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="self"/> or <paramref name="title"/> are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="title"/> is empty.</exception>
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/> isn't properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleMenu.ChooseFromEnum``1(ExtendedConsole.ExConsole,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Displays enum members as a menu for the user to choose from.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="self">The current instance of ExConsole.</param>
            <param name="title">The title of the menu.</param>
            <param name="pleaseSelectText">The text to show below the menu.</param>
            <param name="invalidSelectionText">The text to show when the user enters an invalid value.</param>
            <param name="clearWhenSelected">A boolean value to determine 
            whether the menu should still be displayed after the user have chosen an option.</param>
            <returns>The member of the enum the user selected.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="self"/>, <paramref name="title"/>, <paramref name="pleaseSelectText"/> or <paramref name="invalidSelectionText"/> are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of <paramref name="title"/>, <paramref name="pleaseSelectText"/> or <paramref name="invalidSelectionText"/> is empty or when <paramref name="items"/> are not supplied.</exception>
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/>, <paramref name="pleaseSelectText"/> or <paramref name="invalidSelectionText"/> are not properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleMenu.ChooseFromEnum``1(ExtendedConsole.ExConsole,System.String,System.String,System.Boolean)">
            <summary>
            Displays enum members as a menu for the user to choose from.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="self">The current instance of ExConsole.</param>
            <param name="title">The title of the menu.</param>
            <param name="quitText">The title of a menu item that isn't a member of the enum, to enable the user to return without choosing.</param>
            <param name="clearWhenSelected">A boolean value to determine 
            whether the menu should still be displayed after the user have chosen an option.</param>
            <returns>The member of the enum the user selected.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="self"/> or <paramref name="title"/> are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="title"/> is empty.</exception>
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/> isn't properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleMenu.ChooseFromEnum``1(ExtendedConsole.ExConsole,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Displays enum members as a menu for the user to choose from.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="self">The current instance of ExConsole.</param>
            <param name="title">The title of the menu.</param>
            <param name="pleaseSelectText">The text to show below the menu.</param>
            <param name="invalidSelectionText">The text to show when the user enters an invalid value.</param>
            <param name="quitText">The title of a menu item that isn't a member of the enum, to enable the user to return without choosing.</param>
            <param name="clearWhenSelected">A boolean value to determine 
            whether the menu should still be displayed after the user have chosen an option.</param>
            <returns>The member of the enum the user selected.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="self"/>, <paramref name="title"/>, <paramref name="pleaseSelectText"/>, <paramref name="invalidSelectionText"/> or <paramref name="quitText"/> are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when any of <paramref name="title"/>, <paramref name="pleaseSelectText"/>, <paramref name="invalidSelectionText"/> or <paramref name="quitText"/> is empty or when <paramref name="items"/> are not supplied.</exception>
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/>, <paramref name="pleaseSelectText"/>, <paramref name="invalidSelectionText"/> or <paramref name="quitText"/> are not properly formatted xml.</exception>
        </member>
        <member name="T:ExtendedConsole.ExConsoleRead">
            <summary>
            Provides extension methods for ExConsole for easy reading and parsing inputs from the user.
            </summary>
        </member>
        <member name="M:ExtendedConsole.ExConsoleRead.Pause(ExtendedConsole.ExConsole)">
            <summary>
            Pause the console application until the user press a key.
            </summary>
            <param name="self">The current instance of ExConsole.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="self"/> is null.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleRead.Pause(ExtendedConsole.ExConsole,System.String)">
            <summary>
            Pause the console application until the user press a key.
            </summary>
            <param name="self">The current instance of ExConsole.</param>
            <param name="title">The title to show the user before asking for input.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="self"/> or <paramref name="title"/> are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="title"/> is empty.</exception>
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/> isn't properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleRead.ReadUntilConverted``1(ExtendedConsole.ExConsole,System.String,System.String,System.Func{System.String,System.ValueTuple{System.Boolean,``0}})">
            <summary>
            Reads an input line from the user and converts it to T.
            Repeats until conversion succeeds (even if the user entered ^Z).
            Use with caution - 
            The user can't exit this method without either providing a convertible value or exiting the entire program!
            </summary>
            <typeparam name="T">The target type of the conversion.</typeparam>
            <param name="self">The current instance of ExConsole.</param>
            <param name="title">The title to show the user before asking for input.</param>
            <param name="errorMessage">The error message to show the user if the conversion failed.</param>
            <param name="converter">A function that takes in a string and returns a value tuple of bool success and T value.</param>
            <returns>The T value converted from the input string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="title"/> or <paramref name="errorMessage"/> are empty.</exception>        
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/> or <paramref name="errorMessage"/> aren't properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleRead.ReadStruct``1(ExtendedConsole.ExConsole,System.String,System.String,System.Func{System.String,System.ValueTuple{System.Boolean,``0}})">
            <summary>
            Reads an input line from the user and converts it to a nullable T.
            </summary>
            <typeparam name="T">The underlying type of the nullable to convert to.</typeparam>
            <param name="self">The current instance of ExConsole.</param>
            <param name="title">The title to show the user before asking for input.</param>
            <param name="errorMessage">The error message to show the user if the conversion failed.</param>
            <param name="converter">A function that takes in a string and returns a value tuple of bool success and T value.</param>
            <returns>An instance of T? that has a value unless the user entered ^Z.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="title"/> or <paramref name="errorMessage"/> are empty.</exception>        
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/> or <paramref name="errorMessage"/> aren't properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleRead.ReadClass``1(ExtendedConsole.ExConsole,System.String,System.String,System.Func{System.String,System.ValueTuple{System.Boolean,``0}})">
            <summary>
            Reads an input line from the user and converts it to T.
            </summary>
            <typeparam name="T">The target type of the conversion.</typeparam>
            <param name="self">The current instance of ExConsole.</param>
            <param name="title">The title to show the user before asking for input.</param>
            <param name="errorMessage">The error message to show the user if the conversion failed.</param>
            <param name="converter">A function that takes in a string and returns a value tuple of bool success and T value.</param>
            <returns>The T value converted from the input string, or null if the user entered ^Z.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="title"/> or <paramref name="errorMessage"/> are empty.</exception>        
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/> or <paramref name="errorMessage"/> aren't properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleRead.ReadBool(ExtendedConsole.ExConsole,System.ConsoleKey,System.String)">
            <summary>
            Covnverts the user input to a boolean value.
            </summary>
            <param name="self">The current instance of ExConsole.</param>
            <param name="keyForTrue">The key the user should press to return true.</param>
            <param name="title">The title to show on the console.</param>
            <returns>True if the user pressed the key specified in keyForTrue, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="self"/> or <paramref name="title"/> are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="title"/> is empty.</exception>
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/> isn't properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleRead.ReadBool(ExtendedConsole.ExConsole,System.ConsoleKey,System.ConsoleKey,System.String)">
            <summary>
            Covnverts the user input to a boolean value.
            Will keep waiting until the user press a correct key.
            </summary>
            <param name="self">The current instance of ExConsole.</param>
            <param name="keyForTrue">The key the user should press to return true.</param>
            <param name="keyForFalse">The key the user should press to return false.</param>
            <param name="title">The title to show on the console.</param>
            <returns>True or false based on the key the user pressed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="self"/> or <paramref name="title"/> are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="title"/> is empty.</exception>
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/> isn't properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleRead.ReadInt(ExtendedConsole.ExConsole,System.String)">
            <summary>
            Covnverts the user input to an integer value.
            </summary>
            <param name="self">The current instance of ExConsole.</param>
            <param name="title">The title to show on the console.</param>
            <remarks>If the user enters a value that can't be parsed as int, 
            the title will show again until the user enters an int value.</remarks>
            <returns>The integer value the user entered.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="self"/> or <paramref name="title"/> are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="title"/> is empty.</exception>
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/> isn't properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleRead.ReadInt(ExtendedConsole.ExConsole,System.String,System.Func{System.Int32,System.Boolean})">
            <summary>
            Covnverts the user input to an integer value that meets a specific condition.
            </summary>
            <param name="self">The current instance of ExConsole.</param>
            <param name="title">The title to show on the console. 
            This will be shown repeatedly until the user enters a valid value.</param>
            <param name="condition">The condition the integer value must meet.</param>
            <returns>The integer value the user entered.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="self"/> or <paramref name="title"/> are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="title"/> is empty.</exception>
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/> isn't properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleRead.ReadInt(ExtendedConsole.ExConsole,System.String,System.String,System.Func{System.Int32,System.Boolean})">
            <summary>
            Covnverts the user input to an integer value that meets a specific condition.
            </summary>
            <param name="self">The current instance of ExConsole.</param>
            <param name="title">The title to show on the console.</param>
            <param name="errorMessage">The error message to show the user in case the input value is invalid.</param>
            <param name="condition">The condition the integer value must meet.</param>
            <returns>The integer value the user entered.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="self"/>, <paramref name="title"/> or <paramref name="errorMessage"/> are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="title"/> or <paramref name="errorMessage"/> are empty.</exception>        
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/> or <paramref name="errorMessage"/> aren't properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleRead.ReadDateTime(ExtendedConsole.ExConsole,System.String,System.String)">
            <summary>
            Converts the user input into an instance of the DateTime struct.
            </summary>
            <param name="self">The current instance of ExConsole.</param>
            <param name="title">The title to show on the console.</param>
            <param name="errorMessage">The error message to show the user in case the input value is invalid.</param>
            <returns>A nullable DateTime instance that will have no value if the user entered ^Z.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when any of the parameters is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="title"/> is empty.</exception>        
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/> or <paramref name="errorMessage"/> aren't properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.ExConsoleRead.ReadDateTime(ExtendedConsole.ExConsole,System.String,System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Converts the user input to an instance of a nullable DateTime.
            </summary>
            <param name="self">The current instance of ExConsole.</param>
            <param name="title">The title to show on the console.</param>
            <param name="errorMessage">The error message to show the user in case the input value is invalid.</param>
            <param name="format">The format of the string representation of the datetime value expected.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <param name="dateTimeStyles">A bitwise combination of one or more enumeration values that indicate the permitted format.</param>
            <returns>A nullable DateTime instance that will have no value if the user entered ^Z.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="self"/>, <paramref name="title"/> or <paramref name="errorMessage"/> are null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="title"/> or <paramref name="errorMessage"/> are empty, or if dateTimeStyles is not a member of the DateTimeStyles enum.</exception>
            <exception cref="T:System.Xml.XmlException">Thrown when <paramref name="title"/> or <paramref name="errorMessage"/> aren't properly formatted xml.</exception>
        </member>
        <member name="M:ExtendedConsole.Parser.ParseMarkeup(System.String)">
            <summary>
            Parse markup and returns an instance of the TextBuilder class,
            containing actions to write the text to the Console.
            </summary>
            <param name="markup">A string containing the markup to write to Console.</param>
            <returns>An instance of the TextBuilder class ready to write the text to the Console.</returns>
        </member>
        <member name="M:ExtendedConsole.Parser.ParseNode(ExtendedConsole.TextBuilder,System.Xml.Linq.XNode)">
            <summary>
            Recursively parses XML nodes in the markup.
            </summary>
            <param name="textBuilder">The instance of TextBuilder to hold the parsed information.</param>
            <param name="node">The current XML node to parse.</param>
        </member>
        <member name="M:ExtendedConsole.Parser.ParseElement(ExtendedConsole.TextBuilder,System.Xml.Linq.XElement)">
            <summary>
            Parse an XML element into the text builder.
            If the element has children, Pass them to the ParseNode method.
            </summary>
            <param name="textBuilder">The instance of TextBuilder to hold the parsed information.</param>
            <param name="element">The current XML element to parse.</param>
        </member>
        <member name="M:ExtendedConsole.Parser.WriteElement(ExtendedConsole.TextBuilder,System.Xml.Linq.XElement)">
            <summary>
            Adds the XML element to the TextBuilder.
            </summary>
            <param name="textBuilder">The instance of TextBuilder to hold the parsed information.</param>
            <param name="element">The current XML element to add to the TextBuilder.</param>
        </member>
        <member name="M:ExtendedConsole.Parser.WriteAttributes(ExtendedConsole.TextBuilder,System.Xml.Linq.XAttribute)">
            <summary>
            Adds the attributes of an XML element to the TextBuilder.
            </summary>
            <param name="textBuilder">The instance of TextBuilder to hold the parsed information.</param>
            <param name="attribute">The current attribute to add to the TextBuilder.</param>
        </member>
        <member name="T:ExtendedConsole.TextBuilder">
            <summary>
            Builds the text and colors to write to Console.
            </summary>
        </member>
        <member name="M:ExtendedConsole.TextBuilder.#ctor">
            <summary>
            Initialize a new instance of the TextBuilder class.
            </summary>
        </member>
        <member name="M:ExtendedConsole.TextBuilder.AddText(System.String)">
            <summary>
            Adds text to write to the console.
            </summary>
            <param name="text">Text to write to the console.</param>
        </member>
        <member name="M:ExtendedConsole.TextBuilder.SetForegroundColor(System.ConsoleColor)">
            <summary>
            Adds a foreground color change, and returns the previous foreground color.
            </summary>
            <param name="color">A member of the ConsoleColor enum to set the foreground color to.</param>
            <returns>A nullable member of the ConsoleColor enum.</returns>
        </member>
        <member name="M:ExtendedConsole.TextBuilder.SetBackgroundColor(System.ConsoleColor)">
            <summary>
            Adds a background color change, and returns the previous background color.
            </summary>
            <param name="color">A member of the ConsoleColor enum to set the background color to.</param>
            <returns>A nullable member of the ConsoleColor enum.</returns>
        </member>
        <member name="M:ExtendedConsole.TextBuilder.ResetColors(System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            Adds a foreground / background color change. If an argument is null, it has no effect.
            </summary>
            <param name="foreground">A nullable member of the ConsoleColor enum to set as foreground.</param>
            <param name="background">A nullable member of the ConsoleColor enum to set as background.</param>
        </member>
        <member name="M:ExtendedConsole.TextBuilder.Write">
            <summary>
            Writes the content of the TextBuilder to the Console and clears it.
            </summary>
        </member>
        <member name="M:ExtendedConsole.TextBuilder.WriteLine">
            <summary>
            Writes the content of the TextBuilder to the Console, clears it and adds a new line.
            </summary>
        </member>
    </members>
</doc>
